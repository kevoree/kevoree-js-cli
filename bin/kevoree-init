#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var kConst = require('kevoree-const');
var mkdirp = require('mkdirp');
var ora = require('ora');
var chalk = require('chalk');
var inquirer = require('inquirer');
var validUrl = require('valid-url');
var url = require('url');
var Promise = require('es6-promise');
var xtend = require('xtend');
var printConfig = require('../lib/printConfig');

var DEFAULT_MODULES_PATH = path.join(kConst.CONFIG_PATH, '..');
var CONF_FILE_PATH = path.join(DEFAULT_MODULES_PATH, 'config.json');

var spinner = ora('Initializing Kevoree config...').start();

new Promise(function (resolve, reject) {
	mkdirp(DEFAULT_MODULES_PATH, function (err) {
		if (err) {
			reject(err);
		} else {
			resolve();
		}
	});
}).then(function () {
	return new Promise(function (resolve) {
		fs.lstat(CONF_FILE_PATH, function (err, stats) {
			if (err) {
				resolve(false);
			} else {
				resolve(stats.isFile());
			}
		})
	});
}).then(function (alreadyExists) {
	spinner.stop();
	if (alreadyExists) {
		console.log(chalk.yellow('Warning:'), 'there is already a config file at "' + CONF_FILE_PATH + '"');
		printConfig(require(CONF_FILE_PATH));
		return inquirer.prompt([
			{
				name: 'overwrite',
				type: 'confirm',
				message: 'Overwrite',
				default: false
      }
    ]);
	} else {
		return {
			overwrite: true
		};
	}
}).then(function (answer) {
	if (answer.overwrite) {
		return inquirer.prompt([
			{
				name: 'registry',
				type: 'string',
				message: 'Kevoree Registry URL',
				default: 'https://registry.kevoree.org',
				validate: function (val) {
					if (validUrl.isUri(val)) {
						return true;
					}
					return 'Invalid URI';
				}
      },
			{
				name: 'clientSecret',
				type: 'string',
				default: 'kevoree_registryapp_secret',
				message: 'Kevoree registry OAuth client_secret'
      },
			{
				name: 'clientId',
				type: 'string',
				default: 'kevoree_registryapp',
				message: 'Kevoree registry OAuth client_id'
      }
    ]).then(function (answers) {
			var parsedUrl = url.parse(answers.registry);
			var confFile;
			try {
				confFile = require(CONF_FILE_PATH);
			} catch (ignore) {
				confFile = {};
			}
			var conf = JSON.stringify(
				xtend(
					confFile, {
						registry: {
							host: parsedUrl.host,
							port: parsedUrl.port ? parsedUrl.port : 443,
							ssl: parsedUrl.protocol === 'https:',
							oauth: {
								client_secret: answers.clientSecret,
								client_id: answers.clientId
							}
						}
					}
				), null, 2);

			return new Promise(function (resolve, reject) {
				fs.writeFile(CONF_FILE_PATH, conf, {
					mode: 0600
				}, function (err) {
					if (err) {
						reject(err);
					} else {
						resolve(true);
					}
				});
			});
		});
	}
}).then(function (modified) {
	console.log();
	if (modified) {
		console.log('Config written at: ' + chalk.gray(CONF_FILE_PATH));
	} else {
		console.log(chalk.green('No changes'));
	}
}).catch(function (err) {
	spinner.stop(); // (re-)stop spinner (ie. in case of error it will stop it)
	console.log(chalk.red('Something went wrong :/'));
	console.log(err.stack);
	process.exit(1);
});
